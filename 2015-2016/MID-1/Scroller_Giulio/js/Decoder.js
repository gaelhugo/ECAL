// JavaScript Document
var Decoder = function(){

}

Decoder.prototype = {

	getBinary:function(letter){
		switch(letter){

			case "0":
				return [[0,1,1,1,0],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,0,1,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[0,1,1,1,0]];
			break;
			case "1":
				return [[0,0,1,0,0],
						[0,1,1,0,0],
						[1,0,1,0,0],
						[0,0,1,0,0],
						[0,0,1,0,0],
						[0,0,1,0,0],
						[1,1,1,1,1]];
			break;
			case "2":
				return [[1,1,1,1,0],
						[0,0,0,0,1],
						[0,0,0,0,1],
						[0,1,1,1,0],
						[1,0,0,0,0],
						[1,0,0,0,0],
						[1,1,1,1,1]];
			break;
			case "3":
				return [[0,1,1,1,0],
						[1,0,0,0,1],
						[0,0,0,0,1],
						[0,0,1,1,0],
						[0,0,0,0,1],
						[1,0,0,0,1],
						[0,1,1,1,0]];
			break;
			case "4":
				return [[1,0,0,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,1,1,1,1],
						[0,0,0,0,1],
						[0,0,0,0,1],
						[0,0,0,0,1]];
			break;
			case "5":
				return [[1,1,1,1,1],
						[1,0,0,0,0],
						[1,0,0,0,0],
						[1,1,1,1,0],
						[0,0,0,0,1],
						[0,0,0,0,1],
						[1,1,1,1,0]];
			break;
			case "6":
				return [[0,1,1,1,0],
						[1,0,0,0,1],
						[1,0,0,0,0],
						[1,1,1,1,0],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[0,1,1,1,0]];
			break;
			case "7":
				return [[1,1,1,1,1],
						[0,0,0,0,1],
						[0,0,0,0,1],
						[0,0,0,1,0],
						[0,0,1,0,0],
						[0,0,1,0,0],
						[0,0,1,0,0]];
			break;
			case "8":
				return [[0,1,1,1,0],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[0,1,1,1,0],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[0,1,1,1,0]];
			break;
			case "9":
				return [[0,1,1,1,0],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[0,1,1,1,1],
						[0,0,0,0,1],
						[1,0,0,0,1],
						[0,1,1,1,0]];
			break;
			case ":":
				return [[0,0,0,0,0],
						[0,0,0,0,0],
						[0,0,1,0,0],
						[0,0,0,0,0],
						[0,0,0,0,0],
						[0,0,1,0,0],
						[0,0,0,0,0]];
			break;
			case "h":
				return [[1,0,0,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,1,1,1,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1]];
			break;
			case "e":
				return [[1,1,1,1,1],
						[1,0,0,0,0],
						[1,0,0,0,0],
						[1,1,1,1,1],
						[1,0,0,0,0],
						[1,0,0,0,0],
						[1,1,1,1,1]];
			break;
			case "l":
				return [[1,0,0,0,0],
						[1,0,0,0,0],
						[1,0,0,0,0],
						[1,0,0,0,0],
						[1,0,0,0,0],
						[1,0,0,0,0],
						[1,1,1,1,1]];
			break;
			case "o":
				return [[1,1,1,1,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,1,1,1,1]];
			break;
			case "a":
				return [[1,1,1,1,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,1,1,1,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1]];
			break;
			case "m":
				return [[1,0,0,0,1],
						[1,1,0,1,1],
						[1,0,1,0,1],
						[1,0,1,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1]];
			break;

			case "t":
				return [[1,1,1,1,1],
						[0,0,1,0,0],
						[0,0,1,0,0],
						[0,0,1,0,0],
						[0,0,1,0,0],
						[0,0,1,0,0],
						[0,0,1,0,0]];
			break;
			case " ":
				return [[0,0,0,0,0],
						[0,0,0,0,0],
						[0,0,0,0,0],
						[0,0,0,0,0],
						[0,0,0,0,0],
						[0,0,0,0,0],
						[0,0,0,0,0]];
			break;
			case "p":
				return [[1,1,1,1,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,1,1,1,1],
						[1,0,0,0,0],
						[1,0,0,0,0],
						[1,0,0,0,0]];
			break;
			case "u":
				return [[1,0,0,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,1,1,1,1]];
			break;
			case "i":
				return [[1,1,1,1,1],
						[0,0,1,0,0],
						[0,0,1,0,0],
						[0,0,1,0,0],
						[0,0,1,0,0],
						[0,0,1,0,0],
						[1,1,1,1,1]];
			break;
			case "n":
				return [[1,0,0,0,1],
						[1,1,0,0,1],
						[1,0,1,0,1],
						[1,0,0,1,1],
						[1,0,0,0,1],
						[1,0,0,0,1],
						[1,0,0,0,1]];
			break;


			}
	},

	getBinaryByColumn:function(letter){
		var output = [];

		var binary = this.getBinary(letter);
		for(var col = 0;col<binary[0].length;col++){
			var column = [];
			for(var row = 0;row<binary.length;row++){
				column.push(binary[row][col]);
			}
			output.push(column);
		}
		return output;
	}

}
